OPAL is a Python package for automatic parameter optimization based on the
separate, binary NOMAD library.

Download NOMAD.zip from <http://sourceforge.net/projects/nomad-bb-opt/>
Build it with:

bash <<'EOF'
  T=$(mktemp -d /tmp/cado-nfs.XXXXXXXXX)
  cleanup() { rm -rf "$T" ; }
  trap cleanup EXIT
  cd "$T"
  wget "https://sourceforge.net/projects/nomad-bb-opt/files/unix_linux/NOMAD.zip/download" -O dist.zip
  unzip dist.zip
  v=$(ls -d nomad.*)
  mkdir -p ~/Packages/$v/bin
  cd $v/install && ./install.sh
  cp -p ../bin/nomad ~/Packages/$v/bin
  export PATH=$PATH:$HOME/Packages/$v/bin
EOF

  (Sadly, OPAL insists on executing NOMAD simply as os.system('nomad ' +
  ...); it does not allow specifying a path)

Download OPAL from <https://github.com/dpo/opal>, or clone with the git
command below. Then install OPAL into your user site directory:

bash <<'EOF'
  T=$(mktemp -d /tmp/cado-nfs.XXXXXXXXX)
  cd "$T"
  cleanup() { rm -rf "$T" ; }
  trap cleanup EXIT
  git clone https://github.com/dpo/opal.git
  ND=$(find $HOME/Packages/nomad* -name bin -a -type d | head -1)
  export PATH=$PATH:"$ND"
  cd opal && python setup.py install --user
EOF

- run "make" to build the "makefb" and "las" commands which are necessary
  to run opal/nomad
- copy a polynomial file to the current directory, say c60.poly
- copy a parameter file to the current directory, say params.c60
- run ./optimize.sh params.c60 c60.poly
- at the end of the optimization, the optimized parameter file will be
  params.c60.opt in the current directory. If some optimized variables
  are at the border of an initial interval (for example if optimize.sh
  tried 10 <= I <= 12, and the optimized file uses I=10), you might want
  to rerun the optimization with the new optimized file:
  $ mv params.c60.opt params.c60
  $ ./optimize.sh params.c60 c60.poly

(more details at the beginning of the file optimize.sh)

[the following documentation is out-of-date]

Copy the polynomial file from a c59 factorization to
  scripts/opal-test/c59.polyselect2.poly
Edit las_run.py so that build_dir variable points to your CADO build
directory. A (very slow) automatic optimization of the 
{a,r}{lambda,lim,pba} and I parameters can then be started with
  python las_optimize.py

The optimal parameters are written in a file nomad-solution.xxx.txt,
in the order they are defined in las_declaration.py, for example:

0.900000000000000 # lambda1
1.100000500679016 # lambda0
1000000           # lim1
1000000           # lim0
19                # lpb1
19                # lpb0
23                # mfb1
21                # mfb0
11                # I

For larger numbers, you should also update the hard-coded parameters in
las_declaration.py, especially if one of the optimized parameters equals
one of its bounds defined in that file.

Optimizing parameters for a SNFS computation
============================================

The current optimization code assumes we use special-q's on the algebraic side.
With special-q's on the rational side, some changes have to be made:

1) report.py, line 15: change 'algebraic' into 'rational'

2) las_run.py, line 77: change q0 = las_params["lim1"] into
                               q0 = las_params["lim0"]

3) some other changes might be needed...
