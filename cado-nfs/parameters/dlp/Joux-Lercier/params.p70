
###########################################################################
#     Parameter file for Cado-NFS ; DLP version
###########################################################################
# You will find here example of parameters for Joux-Lercier's algorithm
# and some help to understand parameters.
# At the end you would find example of parameters in the Kleinjung case.

###########################################################################
# General parameters
###########################################################################


name = p70


## N is the prime modulo which we want dlogs and ell is the prime
## factor of N-1 modulo which the computations are done.
#  N = 5747396302599247951444688694383636736151601786728610663697297316973303
#  ell = 2873698151299623975722344347191818368075800893364305331848648658486651
# or you can compute it by using the following command :
# ./cado-nfs.py -dlp -ell 2873698151299623975722344347191818368075800893364305331848648658486651 5747396302599247951444688694383636736151601786728610663697297316973303

## Standard stuff; uncomment and edit according to your config.
#slaves.nrclients=2
##tasks.threads = 2
#tasks.execpath = ...
#tasks.workdir =  ...
#slaves.hostnames=localhost
#slaves.scriptpath=...
#slaves.basepath=...


###########################################################################
# Polynomial selection with Joux-Lercier's algorithm
###########################################################################


# jlpoly enable the Joux-Lercier polynomial select

jlpoly = true

# fastSM is an option imposing to choose polynomials wich would minimise
# computation in Schirokauer maps and logarithm reconstruction.
# However, it's only usefull for little digits numbers (under 80 decimal digits)
# and should be desactivated for bigger ones because the time passed in these
# steps is insignificant compare to the time passed in lattice sieving or
# linear algebra wich expect better polynomials.

fastSM = true

tasks.polyselect.degree = 3

# bound is the maximal size of the coefficients for f, improving it would give
# you a better Murphy-E value but you would spend more time in polynomial
# selection.

tasks.polyselect.bound = 7

# modm is a parameter wich define number of process to use to compute f and g.
# it requires to be co-prime with 2 * bound * (2 * bound + 1) * (bound + 1).

tasks.polyselect.modm = 11

## From here, the parameter are similar to factorization.


###########################################################################
# Sieve
###########################################################################


# Area where we plot (a, b) pairs and compute their norms

tasks.I = 11

# Large prime bound, we choose here norms wich are lpb-smooth.
# here lpb is given in number of bits.
# They will define the larger area where logarithms would be known for the
# descent step

tasks.lpb0 = 18
tasks.lpb1 = 17

# lim define the bound until wich we get prime factors using the Eratostene
# sieving.

tasks.lim0 = 250000
tasks.lim1 = 12500

# mfb define the size in bits of the co-factor not sieved under lim we accept to
# factorize with ECM. mfb should be a multiple of lpb.

tasks.sieve.mfb0 = 18
tasks.sieve.mfb1 = 34

# lambda should be a little upper than the factor difference between lpb and mfb.

tasks.sieve.lambda0 = 1.1
tasks.sieve.lambda1 = 2.1

# qmin define the minimal bound for special-q.
# Note that special-q is a prime factor we would impose in a relation.
# qmin should not be to large to avoid it to be larger than lpb.

tasks.qmin = 25000

# qrange define the number of special-q to compute in one las working unit.

tasks.sieve.qrange = 5000

# Norms in the 0 side (polynomial g) are larger than in the 1 side in
# Joux-Lercier case, for helping lattice sieving to factorize norms, we use it
# on the 0 side.

tasks.sieve.sqside = 0

# rels_wanted impose a minimal amount of relations to get before doing the
# filtering step.
# You should get an amount of unique relations near from primepi(2^lpb0) + 
# primepi(2^lpb1).
# If you don't get enough relations, filtering step would rerun the lattice
# sieving step to collect more relations.

tasks.sieve.rels_wanted = 62000


###########################################################################
# Filtering
###########################################################################


# target_density is the density where we want the Matrix for the linear algebra
# step to be.

tasks.filter.target_density = 92.5


###########################################################################
# Reconstructlog
###########################################################################


tasks.reconstructlog.partial=false

# Here Joux-Lercier is now experimental, so for avoiding error after
# reconstructlog step, we disable checkdlp at the end.
# Should be enabled in the future to compute targets.

tasks.reconstructlog.checkdlp=false


###########################################################################
# Individual log
###########################################################################


# These parameters are not defined now for individual logarithm in Joux-Lercier
# case. However you can find some help in the following comments.

# Here are the parameters used for searching the first relation before making
# the descent tree using the hint table.

tasks.descent.init_I = 11
tasks.descent.init_lpb = 28
tasks.descent.init_lim = 50000
tasks.descent.init_mfb = 56

# ncurves is a parameter for ECM.

tasks.descent.init_ncurves = 10

# tkewness is used like qmin in the lattice sieving, but here to find the
# starting relation.

tasks.descent.init_tkewness = 50000

# Here are the parameter we gave for lattice sieving and where we would search
# logarithms values in the database computed in the precomputation step.

tasks.descent.I = 11
tasks.descent.lim0 = 50000
tasks.descent.lim1 = 50000
tasks.descent.lpb0 = 18
tasks.descent.lpb1 = 18
tasks.descent.mfb0 = 36
tasks.descent.mfb1 = 36




###########################################################################
#     Parameter file for Cado-NFS with Kleinjung's algorithm ; DLP version
###########################################################################

###########################################################################
# General parameters
###########################################################################

#name = p70


###########################################################################
# Polynomial selection with Kleinjung's algorithm
###########################################################################

#tasks.polyselect.degree = 4

#tasks.polyselect.admax = 2000
#tasks.polyselect.incr = 60
#tasks.polyselect.adrange = 1000
#tasks.polyselect.P = 2000
#tasks.polyselect.nq = 1000
#tasks.polyselect.ropteffort = 0.01


###########################################################################
# Sieve
###########################################################################


#tasks.I = 11
#lim0 = 50000
#lim1 = 50000
#lpb0 = 18
#lpb1 = 18
#tasks.sieve.mfb0 = 36
#tasks.sieve.mfb1 = 36
#tasks.sieve.lambda0 = 2.2
#tasks.sieve.lambda1 = 2.2
#tasks.qmin = 15000
#tasks.sieve.qrange = 2500
#tasks.sieve.rels_wanted = 78000



###########################################################################
# Filtering
###########################################################################

#tasks.reconstructlog.partial=false

###########################################################################
# Individual log
###########################################################################

#tasks.descent.init_I = 11
#tasks.descent.init_ncurves = 10
#tasks.descent.init_lpb = 28
#tasks.descent.init_lim = 50000
#tasks.descent.init_mfb = 56
#tasks.descent.init_tkewness = 50000
#tasks.descent.I = 11
#tasks.descent.lim0 = 50000
#tasks.descent.lim1 = 50000
#tasks.descent.lpb0 = 18
#tasks.descent.lpb1 = 18
#tasks.descent.mfb0 = 36
#tasks.descent.mfb1 = 36
