How to set up MinGW for compiling CADO on a Windows Virtual machine

NOTE: commonly encountered errors are at the end of this file.

==== System-wide installation and settings ====

1. Set up a Windows virtual machine

2. Disable popups for aborted programs in Windows Action Center (HOW?) or
they keep popping up during configuration test runs

3. Install MinGW:
http://sourceforge.net/projects/mingw/files/Installer/
"Looking for the latest version? Download x86-mingw32-build-1.0-sh.tar.bz2 (24.9 kB)"
Run it. Choose "Download latest repository catalogues." Choose C compiler, C++ compiler, MinGW Developer Toolkit
We assume C:\MinGW as the MinGW installation directory

4. Make directory "C:\MinGW\msys\1.0\mingw", used as mount point (will be added
to fstab by /postinstall/pi.sh)

5. Open MinGW shell

6. run /pi/postinstall.sh

8. Install GMP for MinGW with: (don't install msys-libgmp!)
mingw-get install mingw32-libgmp

8a. Install the autotools: mingw-get install mingw32-autotools

8b. Install the coreutils: mingw-get install msys-coreutils

8c. Install a port of the GNU regex library for mingw (which is LGPL)
    wget http://sourceforge.net/projects/mingw/files/Other/UserContributed/regex/mingw-regex-2.5.1/mingw-libgnurx-2.5.1-dev.tar.gz/download
    wget http://sourceforge.net/projects/mingw/files/Other/UserContributed/regex/mingw-regex-2.5.1/mingw-libgnurx-2.5.1-bin.tar.gz/downloadg
    (cd /c/Mingw ; tar xzf -) < mingw-libgnurx-2.5.1-dev.tar.gz
    (cd /c/Mingw ; tar xzf -) < mingw-libgnurx-2.5.1-bin.tar.gz


9. Download and install CMake from 
http://www.cmake.org/cmake/resources/software.html

10. Download and install Git from http://git-scm.com/downloads 
Tell Git to add its program directory to the System Path variable, 
or add it yourself, e.g., in 
Start/Computer/System Properties/Advanced Settings/Environment Variables/System Variables
change PATH and append (possibly replacing the directory name to the correct 
directory where Git is installed):
;C:\Program Files (x86)\Git\cmd

11. Download and install Python 3 from http://www.python.org/getit/. The
Python 3 executable is called Python.exe, but the scripts expect to be able
to run a Python 3 interpreter as "python3", so a link must be created:
create the directory /urs/local/bin if it does not exist, and "ln -s" the
Python.exe file as /urs/local/bin/python3

==== Per-user installation and settings ====

7. Make ssh key and copy to VM host computer, write .ssh/config entry

11. Clone CADO git

12. Create .gitattributes in working directory root with contents:
# .gitattributes start
* eol=lf
# .gitattributes end

Check that the attributes are properly taken into account with:

git check-attr -a gf2x/gf2x/gf2x-config.h.in

The output should be:

gf2x/gf2x/gf2x-config.h.in: eol: lf

13. Create .gitignore in working directory root with contents:
# .gitignore start
.gitignore
.gitattributes
local.sh
build/
*~
# .gitignore end

14. Convert line endings to LF with
git rm --cached -r .
git reset --hard

15. Convert link to copies of files. In working directory root, run:
scripts/winlinks.sh

16. Create local.sh which should include these lines:
### local.sh start
GMP=C:/MinGW
CMAKE_GENERATOR="MSYS Makefiles"
GF2X_CONFIGURE_EXTRA_FLAGS='--srcdir=../../../gf2x'
### local.sh end

17. run
make


## Commonly encountered errors:

> No rule to make target 'gf2x.lo', needed by 'libgf2x.la'

You forgot the "GF2X_CONFIGURE_EXTRA_FLAGS" bit in local.sh ; Once
local.sh is fixed, you need to do "make cmake" , then "make".
(alternatively, you may wipe out the content of the build/<machine>/gf2x
directory, and run there configure again).


> ./gf2x/gf2x_mul3.h:42:2: error: #error "This code needs sse-2 support"

Redo steps 12, 14, and 15 above. (more info there
http://mingw-users.1079350.n2.nabble.com/MinGW-s-awk-3-1-7-config-status-and-CRLF-issues-td7234195.html
)

