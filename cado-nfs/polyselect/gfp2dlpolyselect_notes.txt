/*
this is a large comment file.

31/03/2015

what was the latest decision about how to design f for Fp2 ?

constraints:
 -- deg f = 4
 -- # Galois Goup = 4 i.e. C4 (cyclic group) or V4 (Klein group), cf gfpk/notes/Articles/fmnotes.pdf
 -- h = 1 (maybe h=2 ?)
 -- Galois: x -> +/- 1/x for both f and g (?)
 -- signature(f) = (0,2)
 -- signature(Py) = (2,0) (so, f has a quadratic real subfield, so the units come from that subfield)
 -- signature(g) = (0,1) (so, no unit)
 -- badideals(f) = (0,0)
 -- PB: only 8 polys for f with all these constaints.


at the moment (31/03/2015 14:21 GMT+2) the table of f constains polynomials with
cyclic Galois group and totally real quartic cyclic number field.
(Sec. 6.1 in fmnotes.pdf)


Gal = C4 and signature = (0,2)
Gal = C4 and signature = (4,0)

Gal = V4 and signature = (0,2)
Gal = V4 and signature = (4,0) (bof)
Gal = V4 and signature = (2,1) (bof)

regarder: 
table_f_Py_varphi__f_deg4_s02_C4_h1_Py_s20_f01.tab.mag # 2 polys
table_f_Py_varphi__f_deg4_s02_V4_h1_Py_s20_f01.tab.mag # 6 polys

ensuite, regarder les sous-corps quadratiques rÃ©els, et voir si tous les cas 
p = {1,3,5,7} mod 8 sont bien couverts.

> for f in tabV4 do printf " f = %25o, varphi = %24o, Py = %13o, D(Py) = %2o\n", f`f, f`varphi, f`Py, Discriminant(f`Py); end for;
 f =             x^4 - x^2 + 1, varphi =           -y*X + X^2 + 1, Py =       x^2 - 3, D(Py) = 12  x -> 1/x
 f = x^4 - x^3 + 2*x^2 + x + 1, varphi =       -y*X + y + X^2 + X, Py = x^2 - 3*x + 1, D(Py) =  5  ?
 f = x^4 + x^3 + 2*x^2 - x + 1, varphi = -y*X - y + X^2 + 2*X + 3, Py = x^2 - 3*x + 1, D(Py) =  5  ?
 f =                   x^4 + 1, varphi =           -y*X + X^2 + 1, Py =       x^2 - 2, D(Py) =  8  x -> 1/x
 f =           x^4 + 3*x^2 + 1, varphi =             -y + X^2 + 3, Py = x^2 - 3*x + 1, D(Py) =  5  x -> -x
 f =           x^4 + 9*x^2 + 1, varphi =             -y + X^2 + 9, Py = x^2 - 9*x + 1, D(Py) = 77  x -> -x
> for f in tabC4 do printf " f = %25o, varphi = %24o, Py = %13o, D(Py) = %2o\n", f`f, f`varphi, f`Py, Discriminant(f`Py); end for;
 f =   x^4 - x^3 + x^2 - x + 1, varphi =       -y*X + X^2 - X + 1, Py =   x^2 + x - 1, D(Py) =  5  x -> 1/x
 f =   x^4 + x^3 + x^2 + x + 1, varphi =       -y*X + X^2 + X + 1, Py =   x^2 - x - 1, D(Py) =  5  x -> 1/x

conclusion : D = (2),(3),5,8,12,77.

add: f with constant coeff +/- 1.
Then Galois automorphism could be x -> -1/x


MURPHY E

MurphyE(f,g) is computed with

guillevic@cormoran:~/Libs/cado-nfs$ ./build/cormoran/polyselect/rotate <poly file> 0 0

in C, could use directly function in polyselect/murphyE.c
double MurphyE (cado_poly cpoly, double Bf, double Bg, double area, int K);
test: le brancher dans Magma ?
binaire qui calcule alpha et MurphyE pour les deux derniers polynomes des fichiers au bon format.
-- ecrire le fichier avec (f,g) (ouverture/ecriture/fermeture fichier)
-- lancer le binaire avec la commande System() et rediriger la sortie dans un fichier
-- recuperer alpha, Murphy, Murphy conjoint sur la sortie.


double get_alpha (mpz_poly_ptr f, unsigned long B); // auxiliary.c:1176

 */


// TRUE/FALSE are designed somehow like 
/*
#if 1
#define TRUE 1
#define FALSE 0
#else
#if 0
#define TRUE 0
#define FALSE 1
#else
#error
#endif
#endif
*/
